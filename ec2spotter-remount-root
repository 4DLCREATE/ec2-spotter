#!/bin/bash

if [ "$1" = "" ]; then echo "USER ERROR: You forgot to specify the volume-id"; exit -1; fi

ROOT_VOL=$1

export AWS_CREDENTIAL_FILE=/root/.aws.creds
. /root/.aws.creds
export AWS_ACCESS_KEY=$AWSAccessKeyId
export AWS_SECRET_KEY=$AWSSecretKey

export AMIBIN=./ec2-ami-tools-*/bin
export APIBIN=./ec2-api-tools-*/bin

export EC2_HOME=$(ls -d ./ec2-api-tools-*)

export JAVA_HOME=/usr/lib/jvm/default-java
export ARCH=`uname -i`

export INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
export SPOT_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
export SPOT_REGION=${SPOT_ZONE::-1} # Get the region by stripping the last character of the ROOT_ZONE

ROOT_REGION=$SPOT_REGION # By default, we're in the same region
#ROOT_ZONE=$SPOT_ZONE

echo "Looking for a volume in $ROOT_REGION with ID = $ROOT_VOL"

aws ec2 describe-volumes --volume-ids ${ROOT_VOL} --region ${ROOT_REGION} > volumes.tmp

ROOT_ZONE=$(jq -r '.Volumes[0].AvailabilityZone' volumes.tmp)

# Are we copying the volume from the same region?
if [[ $ROOT_ZONE != $SPOT_ZONE ]]; then
    # need to copy the volume across
    echo "Volume $ROOT_VOL is in another Availability Zone"
    echo "Creating a snapshot of the volume"
    SNAPSHOT=$(${APIBIN}/ec2-create-snapshot --region ${ROOT_REGION} $ROOT_VOL --description 'ec2-spotter temporary snapshot ok to delete' | awk '{print $2}')
    
    echo "Snapshot $SNAPSHOT created. Waiting for completion"
    # Keep checking to see that snapshot has been created
    count=0
    while /bin/true
    do
        sleep 30
        eval count=$((count+30))
        echo "... $count seconds gone. Still waiting..."
        STATUS=$(${APIBIN}/ec2-describe-snapshots --region ${ROOT_REGION} ${SNAPSHOT} | grep completed)

        [[ ! -z $STATUS ]] && break
    done
    echo "Snapshot $SNAPSHOT created successfully"
    echo "------------------------------------------------"
    echo ""
    
    if [[ $SPOT_REGION != $ROOT_REGION ]]; then
	    NEW_SNAPSHOT=$(${APIBIN}/ec2-copy-snapshot -r ${SOURCE_REGION} -s ${SNAPSHOT} | awk '{print $2}')
    		
	    echo "Copying snapshot from $SOURCE_REGION to $DEST_REGION with name $NEW_SNAPSHOT. Waiting for completion"		
			
	    # Keep checking to see that snapshot has been copied		
	    count=0		
	    while /bin/true		
	    do		
		sleep 30		
		eval count=$((count+30))		
		echo "... $count seconds gone. Still waiting..."		
		STATUS=$(${APIBIN}/ec2-describe-snapshots ${NEW_SNAPSHOT} | grep completed)		
			
	       [[ ! -z $STATUS ]] && break		
	    done		
			
	    echo "Snapshot $NEW_SNAPSHOT created successfully"		
	    echo "------------------------------------------------"		
	    echo ""
    else
	    NEW_SNAPSHOT=$SNAPSHOT
    fi

    # create volume from this new snapshot
    NEW_VOLUME=$(${APIBIN}/ec2-create-volume --snapshot ${NEW_SNAPSHOT} -z ${SPOT_ZONE} | awk '{print $2}')
    echo "Creating volume $NEW_VOLUME from $NEW_SNAPSHOT. Waiting for completion"
    
    # Keep checking to see that volume has been created
    count=0
    while /bin/true
    do
        sleep 30
        eval count=$((count+30))
        echo "... $count seconds gone. Still waiting..."
        STATUS=$(${APIBIN}/ec2-describe-volumes ${NEW_VOLUME} | grep available)

        [[ ! -z $STATUS ]] && break
    done
    
    echo "Volume $NEW_VOLUME created successfully"
    echo "------------------------------------------------"


    PERSISTENT_ROOT_VOLUME=${NEW_VOLUME}
else
    echo "Using the volume as-is, no migration needed"
    PERSISTENT_ROOT_VOLUME=${ROOT_VOL}
fi

echo ""
echo "Attaching volume $PERSISTENT_ROOT_VOLUME as /dev/sdf"
# Attach volume
${APIBIN}/ec2-attach-volume $PERSISTENT_ROOT_VOLUME -d /dev/sdf --instance $INSTANCE_ID || exit -1

while ! lsblk /dev/xvdf
do
  echo "waiting for device to attach"
  sleep 10
done

DEVICE=/dev/xvdf1
NEWMNT=/permaroot

e2label $DEVICE permaroot
tune2fs $DEVICE -U `uuidgen`
cp grub /$NEWMNT/etc/default/grub

mkdir $NEWMNT
mount $DEVICE $NEWMNT

chroot $NEWMNT sh -c 'mv /etc/grub.d/10_linux /tmp; update-grub; update-grub-legacy-ec2; grub-install /dev/xvda'

#shutdown -r now
